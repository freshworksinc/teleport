// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.scim.v1;

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/scim/v1;scimv1";

// ScimService implements a SCIM gateway for external IDPs for user provisioning
service ScimService {
  // Handle handles an inbound SCIM GET request from an IDP
  rpc Get(GetRequest) returns (ScimResponse);
}

// RequestTarget describes the target resource set of a given request. Common to
// all request types.
message RequestTarget {
  // PluginID is the name of the integration to interact with
  string plugin_id = 1;

  // ResourceType is the name of the type of resource to interact with.
  // Expecting either "User" or "Group"
  string resource_type = 2;

  // ResourceID is the name of a specific resource to interact with. If blank,
  // treat the request as a bulk query
  string resource_id = 3;
}

// GetRequest represents a semi-parsed SCIM GET request for handling
// by a ScimService
message GetRequest {
  RequestTarget target = 1;

  // Page is an optional request to retrieve a page of results. Returns all
  // appropriate results if not set.
  Page page = 2;

  // Filter is an optional filter to apply to any retieved results.
  string filter = 3;

  repeated Header headers = 4;

  bytes body = 5;
}

// Page represents an optional range to set in GET reqsuest
message Page {
  uint64 start_index = 1;
  uint64 count = 2;
}

// Header is an HTTP-style header value
message Header {
  string key = 1;
  repeated string values = 2;
}

// ScimResponse represents a semi-formatted response from the ScimService
message ScimResponse {
  uint32 status_code = 1;
  repeated Header headers = 2;
  bytes body = 3;
}
